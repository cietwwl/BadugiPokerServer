<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		                http://www.springframework.org/schema/util
		                http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- The Spring application context -->
	<bean id="appContext" class="io.nadron.context.AppContext" />
		
	<!-- Configure the three servers. By default tcp and udp runs at 18090 and flash at 843 -->
	<bean id="serverManager" class="io.nadron.server.netty.ServerManagerImpl" />
	
	<!-- Configure all properties files here, wildcards like *.properties are 
		also allowed -->
	<!-- <context:property-placeholder location="/config/props/server.properties" /> -->
	<bean id="taskManagerService" class="io.nadron.service.impl.SimpleTaskManagerService"
		destroy-method="shutdown">
		<constructor-arg type="int" index="0" value="2" />
	</bean>

	<bean id="gameAdminService" class="io.nadron.service.impl.SimpleGameAdminService">
		<property name="games">
			<set></set>
		</property>
	</bean>

	<bean id="udpSessionRegistry" class="io.nadron.service.impl.SessionRegistry" />

	<bean id="reconnectSessionRegistry" class="io.nadron.service.impl.ReconnectSessionRegistry">
		<property name="taskManagerService" ref="taskManagerService" />
		<property name="reconnectDelay" value="${reconnect.delay}" />
	</bean>

	<bean id="simpleUniqueIdGenerator" class="io.nadron.service.impl.SimpleUniqueIdGenerator" />

    <bean id="defaultUniqueIdGenerator" class="io.nadron.service.impl.DefaultUniqueIdGenerator" />

	<bean id="jackson" class="org.codehaus.jackson.map.ObjectMapper" />

	<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		 !!               Netty Service Setting          !!
		 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->
	<bean id="bossThreadFactory" class="io.nadron.concurrent.NamedThreadFactory">
		<constructor-arg type="java.lang.String" value="Server-Boss" />
	</bean>
	<bean id="workerThreadFactory" class="io.nadron.concurrent.NamedThreadFactory">
		<constructor-arg type="java.lang.String" index="0" value="Server-Worker" />
	</bean>
	<bean id="bossGroup" class="io.netty.channel.nio.NioEventLoopGroup"
		destroy-method="shutdownGracefully">
		<constructor-arg type="int" index="0" value="${bossThreadCount}" />
		<constructor-arg index="1" ref="bossThreadFactory" />
	</bean>
	<bean id="workerGroup" class="io.netty.channel.nio.NioEventLoopGroup"
		destroy-method="shutdownGracefully">
		<constructor-arg type="int" index="0"
			value="${workerThreadCount}" />
		<constructor-arg index="1" ref="workerThreadFactory" />
	</bean>

	<!-- Netty options for server bootstrap -->
	<util:map id="tcpChannelOptions" map-class="java.util.HashMap">
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_KEEPALIVE" /></key>
			<value type="java.lang.Boolean">${so.keepalive}</value>
		</entry>
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_BACKLOG" /></key>
			<value type="java.lang.Integer">${so.backlog}</value>
		</entry>
	</util:map>
	<util:map id="udpChannelOptions" map-class="java.util.HashMap">
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_SNDBUF" /></key>
			<value type="java.lang.Integer">${so.sndbuf}</value>
		</entry>
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_RCVBUF" /></key>
			<value type="java.lang.Integer">${so.rcvbuf}</value>
		</entry>
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_BROADCAST" /></key>
			<value type="java.lang.Boolean">${so.broadcast}</value>
		</entry>
	</util:map>
	<util:map id="httpChannelOptions" map-class="java.util.HashMap">
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_BACKLOG" /></key>
			<value type="java.lang.Integer">${http.so.backlog}</value>
		</entry>
	</util:map>
</beans>
